{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import React, \{ useState, useEffect, useMemo \} from 'react'; import \{ initializeApp \} from 'firebase/app'; import \{ getAuth, signInAnonymously \} from 'firebase/auth'; import \{ getFirestore, collection, onSnapshot, addDoc, doc, updateDoc, deleteDoc, writeBatch, getDocs, query \} from 'firebase/firestore'; // --- FIREBASE CONFIG --- const firebaseConfig = \{ apiKey: "AIzaSyCXzLo26jWp9hox-nydQlpJYAgT22bV1f0", authDomain: "kmskicker-5ffd1.firebaseapp.com", projectId: "kmskicker-5ffd1", storageBucket: "kmskicker-5ffd1.appspot.com", messagingSenderId: "782317824902", appId: "1:782317824902:web:c3b7ee6f8c90059123da07" \}; const SLOT_CONFIG = [ \{ position: 'St\'fcrmer Team 1', team: 1 \}, \{ position: 'Verteidiger Team 1', team: 1 \}, \{ position: 'St\'fcrmer Team 2', team: 2 \}, \{ position: 'Verteidiger Team 2', team: 2 \}, ]; // --- COMPONENTS --- const Modal = (\{ isOpen, onClose, children \}) => \{ if (!isOpen) return null; return ( <div className="fixed inset-0 bg-black bg-opacity-75 flex justify-center items-center z-50" onClick=\{onClose\}> <div className="bg-gray-800 p-8 rounded-lg shadow-xl w-full max-w-md" onClick=\{e => e.stopPropagation()\}> \{children\} </div> </div> ); \}; const LoginScreen = (\{ onLogin \}) => \{ const [password, setPassword] = useState(''); const [error, setError] = useState(''); const [isLoggedIn, setIsLoggedIn] = useState(false); const handleLogin = (e) => \{ e.preventDefault(); setError(''); if (password === '123') \{ setIsLoggedIn(true); setTimeout(() => \{ onLogin(); \}, 1500); // Wait 1.5 seconds before transitioning \} else \{ setError('Falsches Passwort'); setPassword(''); \} \}; return ( <> <style>\{` @import url('https://fonts.googleapis.com/css2?family=Oswald:wght@200;300;400&display=swap'); .font-oswald \{ font-family: 'Oswald', sans-serif; \} `\}</style> <div className="flex flex-col h-screen bg-[#001f3f] font-oswald text-white"> <div className="w-full"> <div className="h-4 bg-[#333333]"></div> <div className="h-4 bg-[#ff0033]"></div> <div className="h-4 bg-[#cc0033]"></div> <div className="h-4 bg-[#660033]"></div> </div> <div className="flex-grow flex flex-col justify-center px-8 md:px-16"> <h1 className="text-8xl md:text-9xl text-white font-extralight tracking-wider mb-12"> \{isLoggedIn ? 'LOGGED IN' : 'LOGIN'\} </h1> \{!isLoggedIn && ( <form onSubmit=\{handleLogin\} className="w-full max-w-sm flex items-center gap-4"> <input type="password" value=\{password\} onChange=\{(e) => setPassword(e.target.value)\} placeholder="Password" className="flex-grow px-4 py-3 bg-white/90 text-black placeholder-gray-500 border-none focus:ring-0 text-lg font-light" /> <button type="submit" className="px-8 py-3 bg-[#cc0033] text-white text-lg font-light"> Send </button> </form> )\} \{error && <p className="text-red-400 mt-4 font-light">\{error\}</p>\} </div> <div className="w-full flex justify-between p-4 text-white/50 text-sm font-light"> <span>Admin</span> <span>V1.0</span> </div> </div> </> ); \}; const PlayerCard = (\{ player, onSelect, onSelectScore, isSelected, isSelectable \}) => ( <div className=\{`relative border-4 rounded-lg overflow-hidden transition-all duration-300 $\{isSelected ? 'border-yellow-500 scale-105 shadow-2xl' : 'border-gray-700'\} $\{!isSelectable && !isSelected ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer hover:border-green-400'\}`\}> <div onClick=\{() => isSelectable && onSelect(player)\}> <img src=\{player.img\} alt=\{`$\{player.firstName\} $\{player.lastName\}`\} className="w-full h-auto object-cover" /> <div className="absolute bottom-0 left-0 right-0 bg-black bg-opacity-70 p-2 text-white"> <h3 className="font-bold text-lg truncate">\{`$\{player.firstName\} $\{player.lastName\}`\}</h3> <p className="text-sm font-normal">\{player.country\}</p> </div> </div> \{(player.seasonsWon > 0) && <div className="absolute top-2 left-2 flex gap-1"> \{Array.from(\{ length: player.seasonsWon \}).map((_, i) => ( <svg key=\{i\} className="w-5 h-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20"><path d="M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z"/></svg> ))\} </div> \} <div className="absolute top-2 right-2 bg-yellow-400 text-black text-xs font-bold px-2 py-1 rounded-full cursor-pointer hover:bg-yellow-300" onClick=\{() => onSelectScore(player)\} > \{player.score\} </div> </div> ); const SelectionSlot = (\{ slot, player, onSelect, isActive \}) => ( <div className=\{`w-32 h-40 border-4 rounded-lg flex flex-col items-center justify-center text-center p-2 transition-all duration-200 $\{isActive ? 'border-green-500 bg-gray-700' : 'border-dashed border-gray-600'\}`\} onClick=\{onSelect\} > \{player ? ( <> <div className="relative"> <img src=\{player.img\} alt=\{player.firstName\} className="w-16 h-20 object-cover rounded-md mb-1" /> \{(player.seasonsWon > 0) && <div className="absolute -top-1 -right-1 flex"> <svg className="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20"><path d="M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z"/></svg> </div> \} </div> <p className="text-white font-bold text-sm">\{player.firstName\}</p> <p className="text-yellow-400 text-xs font-normal">\{slot.position\}</p> </> ) : ( <p className="text-gray-400 font-normal">\{slot.position\}</p> )\} </div> ); const PlayerForm = (\{ onSave, onClose, player \}) => \{ const [formData, setFormData] = useState(\{ firstName: player?.firstName || '', lastName: player?.lastName || '', country: player?.country || '', img: player?.img || '', \}); const isEditing = !!player; const handleChange = (e) => \{ const \{ name, value \} = e.target; setFormData(prev => (\{ ...prev, [name]: value \})); \}; const handleSubmit = (e) => \{ e.preventDefault(); if (!formData.firstName || !formData.lastName || !formData.country) \{ alert('Bitte alle Felder ausf\'fcllen.'); return; \} onSave(formData); \}; return ( <form onSubmit=\{handleSubmit\}> <h2 className="text-2xl text-white font-thin mb-6 text-center">Neuen Spieler anlegen</h2> <div className="mb-4"> <input type="text" name="firstName" placeholder="Vorname" value=\{formData.firstName\} onChange=\{handleChange\} className="w-full p-3 bg-gray-700 rounded-md text-white border-2 border-gray-600 focus:outline-none focus:border-yellow-400 font-normal" /> </div> <div className="mb-4"> <input type="text" name="lastName" placeholder="Nachname" value=\{formData.lastName\} onChange=\{handleChange\} className="w-full p-3 bg-gray-700 rounded-md text-white border-2 border-gray-600 focus:outline-none focus:border-yellow-400 font-normal" /> </div> <div className="mb-4"> <input type="text" name="country" placeholder="Landesk\'fcrzel (z.B. DE)" value=\{formData.country\} onChange=\{handleChange\} maxLength="3" className="w-full p-3 bg-gray-700 rounded-md text-white border-2 border-gray-600 focus:outline-none focus:border-yellow-400 font-normal" /> </div> <div className="mb-6"> <input type="text" name="img" placeholder="Bild-URL (optional)" value=\{formData.img\} onChange=\{handleChange\} className="w-full p-3 bg-gray-700 rounded-md text-white border-2 border-gray-600 focus:outline-none focus:border-yellow-400 font-normal" /> </div> <button type="submit" className="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-3 rounded-lg text-xl"> \{isEditing ? '\'c4nderungen speichern' : 'Spieler hinzuf\'fcgen'\} </button> </form> ); \}; const ConfirmationDialog = (\{ message, onConfirm, onCancel \}) => \{ return ( <div> <p className="text-white text-xl text-center mb-8 font-normal">\{message\}</p> <div className="flex justify-center gap-4"> <button onClick=\{onConfirm\} className="bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-8 text-lg rounded-lg">Best\'e4tigen</button> <button onClick=\{onCancel\} className="bg-gray-600 hover:bg-gray-700 text-white font-bold py-3 px-8 text-lg rounded-lg">Abbrechen</button> </div> </div> ); \}; const ManagePlayersScreen = (\{ players, onAddPlayer, onUpdatePlayer, onDeletePlayer \}) => \{ const [modalState, setModalState] = useState(\{ type: null, player: null \}); // type: 'add', 'edit', 'delete' const sortedPlayers = useMemo(() => \{ return [...players].sort((a, b) => \{ const lastNameA = a.lastName || ''; const lastNameB = b.lastName || ''; const firstNameA = a.firstName || ''; const firstNameB = b.firstName || ''; if (lastNameA.toLowerCase() < lastNameB.toLowerCase()) return -1; if (lastNameA.toLowerCase() > lastNameB.toLowerCase()) return 1; if (firstNameA.toLowerCase() < firstNameB.toLowerCase()) return -1; if (firstNameA.toLowerCase() > firstNameB.toLowerCase()) return 1; return 0; \}); \}, [players]); const handleSavePlayer = (formData) => \{ if (modalState.type === 'add') \{ onAddPlayer(formData); \} else if (modalState.type === 'edit') \{ onUpdatePlayer(modalState.player.id, formData); \} setModalState(\{ type: null, player: null \}); \}; const handleDeleteConfirm = () => \{ onDeletePlayer(modalState.player.id); setModalState(\{ type: null, player: null \}); \}; return ( <div className="p-4 md:p-8 text-white"> <Modal isOpen=\{modalState.type !== null\} onClose=\{() => setModalState(\{ type: null, player: null \})\}> \{ (modalState.type === 'add' || modalState.type === 'edit') && <PlayerForm onSave=\{handleSavePlayer\} onClose=\{() => setModalState(\{ type: null, player: null \})\} player=\{modalState.player\} /> \} \{ modalState.type === 'delete' && <ConfirmationDialog message=\{`Spieler "$\{modalState.player.firstName\} $\{modalState.player.lastName\}" wirklich l\'f6schen?`\} onConfirm=\{handleDeleteConfirm\} onCancel=\{() => setModalState(\{ type: null, player: null \})\} /> \} </Modal> <div className="flex justify-end items-center mb-6"> <button onClick=\{() => setModalState(\{ type: 'add', player: null \})\} className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg">+ Neuer Spieler erstellen</button> </div> <div className="bg-black/20 rounded-lg shadow-lg overflow-hidden"> <table className="w-full text-left font-normal"> <thead className="bg-black/30"> <tr> <th className="p-4">Nachname</th> <th className="p-4">Vorname</th> <th className="p-4">Land</th> <th className="p-4">Bild</th> <th className="p-4">Aktion</th> </tr> </thead> <tbody> \{sortedPlayers.map(p => ( <tr key=\{p.id\} className="border-b border-white/10 hover:bg-white/5"> <td className="p-4 cursor-pointer" onClick=\{() => setModalState(\{ type: 'edit', player: p \})\}>\{p.lastName\}</td> <td className="p-4 cursor-pointer" onClick=\{() => setModalState(\{ type: 'edit', player: p \})\}>\{p.firstName\}</td> <td className="p-4 cursor-pointer" onClick=\{() => setModalState(\{ type: 'edit', player: p \})\}>\{p.country\}</td> <td className="p-4"><img src=\{p.img\} alt=\{p.firstName\} className="w-10 h-12 object-cover rounded-sm" /></td> <td className="p-4"> <button onClick=\{() => setModalState(\{ type: 'delete', player: p \})\} className="text-red-500 hover:text-red-400 text-2xl font-bold"> &times; </button> </td> </tr> ))\} </tbody> </table> </div> </div> ); \}; const PlayerSelectionScreen = (\{ players, onGameStart, onShowPlayerDetail \}) => \{ const [slots, setSlots] = useState(SLOT_CONFIG.map(config => (\{ ...config, player: null \}))); const [activeSlotIndex, setActiveSlotIndex] = useState(0); const selectedPlayerIds = useMemo(() => slots.map(s => s.player?.id).filter(Boolean), [slots]); const isReadyToStart = useMemo(() => selectedPlayerIds.length === 4, [selectedPlayerIds]); const handleSlotClick = (index) => \{ if (slots[index].player) \{ const newSlots = [...slots]; newSlots[index].player = null; setSlots(newSlots); setActiveSlotIndex(index); \} else \{ setActiveSlotIndex(index); \} \}; const handlePlayerSelect = (player) => \{ if (selectedPlayerIds.includes(player.id)) \{ const playerIndex = slots.findIndex(s => s.player?.id === player.id); if(playerIndex !== -1) handleSlotClick(playerIndex); return; \} if (activeSlotIndex === null || activeSlotIndex === -1) return; if (!slots[activeSlotIndex].player) \{ const newSlots = [...slots]; newSlots[activeSlotIndex].player = player; setSlots(newSlots); const nextEmptyIndex = newSlots.findIndex((s, i) => !s.player && i > activeSlotIndex); setActiveSlotIndex(nextEmptyIndex !== -1 ? nextEmptyIndex : newSlots.findIndex(s => !s.player)); \} \}; const handleStartGame = () => \{ const team1 = \{ striker: slots.find(s => s.position === 'St\'fcrmer Team 1').player, defender: slots.find(s => s.position === 'Verteidiger Team 1').player \}; const team2 = \{ striker: slots.find(s => s.position === 'St\'fcrmer Team 2').player, defender: slots.find(s => s.position === 'Verteidiger Team 2').player \}; onGameStart(team1, team2); \}; const sortedPlayers = useMemo(() => [...players].sort((a, b) => b.score - a.score), [players]); return ( <div className="p-4 md:p-8 text-white"> <div className="flex justify-center items-center gap-4 mb-8"> \{slots.map((slot, index) => ( <SelectionSlot key=\{index\} slot=\{slot\} player=\{slot.player\} onSelect=\{() => handleSlotClick(index)\} isActive=\{index === activeSlotIndex\} /> ))\} </div> <div className="flex justify-center gap-4 mb-8"> <button onClick=\{handleStartGame\} disabled=\{!isReadyToStart\} className="bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-8 text-xl rounded-lg shadow-lg transition-all disabled:bg-gray-600 disabled:cursor-not-allowed">Spiel starten!</button> </div> <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-7 gap-4 md:gap-6"> \{sortedPlayers.map(player => ( <PlayerCard key=\{player.id\} player=\{player\} onSelect=\{handlePlayerSelect\} onSelectScore=\{onShowPlayerDetail\} isSelected=\{selectedPlayerIds.includes(player.id)\} isSelectable=\{!selectedPlayerIds.includes(player.id) && activeSlotIndex !== -1\} /> ))\} </div> </div> ); \}; const Game = (\{ initialTeam1, initialTeam2, onGameEnd, onNewGame \}) => \{ // This component is now a placeholder and will not be displayed with the new navigation return <div>Game Content Placeholder</div>; \}; const StatisticsScreen = (\{ players, onShowPlayerDetail, currentSeason, onSeasonClose \}) => \{ const [isModalOpen, setIsModalOpen] = useState(false); const sortedPlayers = useMemo(() => [...players].sort((a, b) => b.score - a.score), [players]); return ( <div className="p-4 md:p-8 text-white"> <Modal isOpen=\{isModalOpen\} onClose=\{() => setIsModalOpen(false)\}> <ConfirmationDialog message=\{`Saison $\{currentSeason\} wirklich schlie\'dfen? Der Sieger wird ermittelt und die Punktest\'e4nde werden zur\'fcckgesetzt.`\} onConfirm=\{() => \{ onSeasonClose(); setIsModalOpen(false); \}\} onCancel=\{() => setIsModalOpen(false)\} /> </Modal> <div className="flex justify-end items-center mb-8"> <button onClick=\{() => setIsModalOpen(true)\} className="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg">Saison schlie\'dfen</button> </div> <div className="max-w-4xl mx-auto"> <div className="bg-black/20 rounded-lg shadow-lg"> \{sortedPlayers.map((player, index) => ( <div key=\{player.id\} className=\{`flex items-center p-4 border-b border-white/10 $\{index === 0 ? 'bg-yellow-500/20' : ''\} cursor-pointer hover:bg-white/5`\} onClick=\{() => onShowPlayerDetail(player)\}> <div className="text-2xl font-bold w-12 text-center">\{index + 1\}</div> <img src=\{player.img\} alt=\{`$\{player.firstName\} $\{player.lastName\}`\} className="w-12 h-16 object-cover rounded-md mx-4" /> <div className="flex-grow"><h3 className="text-xl font-bold">\{`$\{player.firstName\} $\{player.lastName\}`\}</h3><p className="text-sm font-normal">\{player.country\}</p></div> <div className="text-right"><div className="text-xl font-bold text-yellow-400">\{player.score\}</div><div className="text-sm text-green-400">G: \{player.gamesWon\}</div><div className="text-sm text-red-400">V: \{player.gamesLost\}</div></div> </div> ))\} </div> </div> </div> ); \}; const SaisonsScreen = (\{ history \}) => \{ const sortedHistory = useMemo(() => [...history].sort((a, b) => b.seasonNumber - a.seasonNumber), [history]); return ( <div className="p-4 md:p-8 text-white"> <div className="max-w-2xl mx-auto"> <div className="bg-black/20 rounded-lg shadow-lg"> <table className="w-full text-left font-normal"> <thead className="bg-black/30"> <tr> <th className="p-4 text-xl font-normal">Saison</th> <th className="p-4 text-xl font-normal">Sieger</th> </tr> </thead> <tbody> \{sortedHistory.map(season => ( <tr key=\{season.id\} className="border-b border-white/10"> <td className="p-4 text-lg">Saison \{season.seasonNumber\}</td> <td className="p-4 text-lg">\{season.winnerName\}</td> </tr> ))\} </tbody> </table> </div> </div> </div> ); \}; const PlayerDetailScreen = (\{ player, onBack \}) => \{ // This component is now a placeholder and will not be displayed with the new navigation return <div>Player Detail Placeholder</div>; \}; const NavBand = (\{ title, bgColor, textColor, isActive, onClick, children \}) => \{ return ( <div className=\{`relative w-full overflow-hidden transition-all duration-700 ease-out`\} style=\{\{ backgroundColor: bgColor, color: textColor, flexGrow: isActive ? 100 : 1, maxHeight: isActive ? '100vh' : '4rem', \}\} onClick=\{onClick\} > <div className=\{`absolute top-0 left-0 w-full p-4 transition-all duration-500 ease-out $\{isActive ? 'opacity-0 -translate-y-4' : 'opacity-100'\}`\}> <h2 className="text-lg font-light">\{title\}</h2> </div> <div className=\{`absolute top-0 left-0 w-full p-8 transition-all duration-500 ease-out $\{isActive ? 'opacity-100' : 'opacity-0 translate-y-4'\}`\}> <h1 className="text-8xl font-extralight tracking-wider uppercase">\{title\}</h1> </div> <div className=\{`absolute top-32 left-0 w-full h-full overflow-y-auto transition-opacity duration-500 delay-200 $\{isActive ? 'opacity-100' : 'opacity-0'\}`\}> \{isActive && children\} </div> </div> ); \}; // --- MAIN APP --- export default function App() \{ const [isLoggedIn, setIsLoggedIn] = useState(false); const [players, setPlayers] = useState([]); const [seasonHistory, setSeasonHistory] = useState([]); const [appState, setAppState] = useState(\{ currentSeason: 1 \}); const [db, setDb] = useState(null); const [activeView, setActiveView] = useState('new_game'); // Placeholder states for old components that are not used in the new nav const [gameConfig, setGameConfig] = useState(null); const [detailPlayer, setDetailPlayer] = useState(null); useEffect(() => \{ if (!firebaseConfig || !firebaseConfig.apiKey || firebaseConfig.apiKey.includes("DEIN_API_KEY")) \{ console.warn("Firebase ist nicht konfiguriert."); return; \} try \{ const app = initializeApp(firebaseConfig); const auth = getAuth(app); const firestore = getFirestore(app); setDb(firestore); signInAnonymously(auth).catch(error => console.error("Anonymous sign-in failed:", error)); const playersCollection = collection(firestore, "players"); const unsubscribePlayers = onSnapshot(playersCollection, (snapshot) => \{ const playersData = snapshot.docs.map(doc => (\{ id: doc.id, ...doc.data() \})); setPlayers(playersData); \}); const appStateDoc = doc(firestore, "appState", "config"); const unsubscribeAppState = onSnapshot(appStateDoc, (doc) => \{ if (doc.exists()) \{ setAppState(doc.data()); \} \}); const historyCollection = collection(firestore, "seasonHistory"); const unsubscribeHistory = onSnapshot(historyCollection, (snapshot) => \{ const historyData = snapshot.docs.map(doc => (\{ id: doc.id, ...doc.data() \})); setSeasonHistory(historyData); \}); return () => \{ unsubscribePlayers(); unsubscribeAppState(); unsubscribeHistory(); \}; \} catch (error) \{ console.error("Firebase initialization failed:", error); \} \}, []); if (!isLoggedIn) \{ return <LoginScreen onLogin=\{() => setIsLoggedIn(true)\} />; \} const handleAddPlayer = async (playerData) => \{ if (!db) return; try \{ const newPlayer = \{ ...playerData, country: playerData.country.toUpperCase(), img: playerData.img || `https://placehold.co/150x200/EFEFEF/333?text=$\{playerData.firstName\}`, score: 1500, gamesWon: 0, gamesLost: 0, gamesAsStriker: 0, gamesAsDefender: 0, totalGames: 0, goalsAsStriker: 0, goalsAsDefender: 0, shutoutWins: 0, totalPlaytime: 0, seasonsWon: 0 \}; await addDoc(collection(db, "players"), newPlayer); \} catch (error) \{ console.error("Error adding player: ", error); \} \}; const handleUpdatePlayer = async (playerId, playerData) => \{ if (!db) return; try \{ const playerRef = doc(db, "players", playerId); await updateDoc(playerRef, playerData); \} catch (error) \{ console.error("Error updating player: ", error); \} \}; const handleDeletePlayer = async (playerId) => \{ if (!db) return; try \{ await deleteDoc(doc(db, "players", playerId)); \} catch (error) \{ console.error("Error deleting player: ", error); \} \}; const handleGameStart = (team1, team2) => \{ // This function would transition to a dedicated game screen // For now, we just log it console.log("Game started with:", team1, team2); alert("Das Spiel w\'fcrde jetzt starten!"); \}; const handleCloseSeason = async () => \{ if (!db || players.length === 0) return; const sortedPlayers = [...players].sort((a, b) => b.score - a.score); const winner = sortedPlayers[0]; try \{ await addDoc(collection(db, "seasonHistory"), \{ seasonNumber: appState.currentSeason, winnerName: `$\{winner.firstName\} $\{winner.lastName\}`, winnerId: winner.id, endDate: new Date() \}); const winnerRef = doc(db, "players", winner.id); await updateDoc(winnerRef, \{ seasonsWon: (winner.seasonsWon || 0) + 1 \}); const batch = writeBatch(db); const playersQuery = query(collection(db, "players")); const querySnapshot = await getDocs(playersQuery); querySnapshot.forEach((playerDoc) => \{ const playerRef = doc(db, "players", playerDoc.id); batch.update(playerRef, \{ score: 1500 \}); \}); await batch.commit(); const appStateRef = doc(db, "appState", "config"); await updateDoc(appStateRef, \{ currentSeason: appState.currentSeason + 1 \}); \} catch (error) \{ console.error("Error closing season:", error); \} \}; const navItems = [ \{ id: 'new_game', title: 'New Game', bgColor: '#333333', textColor: 'white' \}, \{ id: 'ranking', title: 'Ranking', bgColor: '#cc0033', textColor: 'white' \}, \{ id: 'history', title: 'History', bgColor: '#660033', textColor: 'white' \} ]; return ( <> <style>\{` @import url('https://fonts.googleapis.com/css2?family=Oswald:wght@200;300;400&display=swap'); body \{ font-family: 'Oswald', sans-serif; \} `\}</style> <div className="flex flex-col h-screen w-full overflow-hidden"> \{navItems.map(item => ( <NavBand key=\{item.id\} title=\{item.title\} bgColor=\{item.bgColor\} textColor=\{item.textColor\} isActive=\{activeView === item.id\} onClick=\{() => setActiveView(item.id)\} > \{item.id === 'new_game' && <PlayerSelectionScreen players=\{players\} onGameStart=\{handleGameStart\} onShowPlayerDetail=\{() => \{\}\} />\} \{item.id === 'ranking' && <StatisticsScreen players=\{players\} onShowPlayerDetail=\{() => \{\}\} currentSeason=\{appState.currentSeason\} onSeasonClose=\{handleCloseSeason\} />\} \{item.id === 'history' && <SaisonsScreen history=\{seasonHistory\} />\} </NavBand> ))\} <div className="w-full bg-[#001f3f] p-4 flex justify-between items-center text-white/50 font-light"> <span>Admin</span> <span>V1.0</span> </div> </div> </> ); \}}